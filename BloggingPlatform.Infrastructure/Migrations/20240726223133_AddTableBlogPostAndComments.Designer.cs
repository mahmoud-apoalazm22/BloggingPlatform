// <auto-generated />
using System;
using BloggingPlatform.Infrastructure.Common.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloggingPlatform.Infrastructure.Migrations
{
    [DbContext(typeof(BloggingPlatformtDbContext))]
    [Migration("20240726223133_AddTableBlogPostAndComments")]
    partial class AddTableBlogPostAndComments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BloggingPlatform.Domain.BlogPosts.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("691bb48e-4acb-4797-ad80-a048107f74c7"),
                            Content = "This is the content of the first post.",
                            CreatedAt = new DateTime(2024, 7, 26, 22, 31, 32, 120, DateTimeKind.Utc).AddTicks(3765),
                            Title = "First Post",
                            UserId = new Guid("3670dc16-c548-4142-a4e8-ccd6691dcb6c")
                        },
                        new
                        {
                            Id = new Guid("afc8ea8d-e918-4c68-a896-8a64d9e2b3ff"),
                            Content = "This is the content of the second post.",
                            CreatedAt = new DateTime(2024, 7, 26, 22, 31, 32, 120, DateTimeKind.Utc).AddTicks(3777),
                            Title = "Second Post",
                            UserId = new Guid("e3f54c19-7c26-48d6-8696-1359e7e88f86")
                        },
                        new
                        {
                            Id = new Guid("9e804865-4ffa-4084-b617-38bf5e6463de"),
                            Content = "This is the content of the third post.",
                            CreatedAt = new DateTime(2024, 7, 26, 22, 31, 32, 120, DateTimeKind.Utc).AddTicks(3844),
                            Title = "Third Post",
                            UserId = new Guid("3670dc16-c548-4142-a4e8-ccd6691dcb6c")
                        },
                        new
                        {
                            Id = new Guid("c69665cf-830c-493a-8be3-d985fd978f55"),
                            Content = "This is the content of the fourth post.",
                            CreatedAt = new DateTime(2024, 7, 26, 22, 31, 32, 120, DateTimeKind.Utc).AddTicks(3850),
                            Title = "Fourth Post",
                            UserId = new Guid("e3f54c19-7c26-48d6-8696-1359e7e88f86")
                        },
                        new
                        {
                            Id = new Guid("9c137fed-cf93-4ad7-91dc-ff665b96f338"),
                            Content = "This is the content of the fifth post.",
                            CreatedAt = new DateTime(2024, 7, 26, 22, 31, 32, 120, DateTimeKind.Utc).AddTicks(3857),
                            Title = "Fifth Post",
                            UserId = new Guid("3670dc16-c548-4142-a4e8-ccd6691dcb6c")
                        },
                        new
                        {
                            Id = new Guid("fae6e7cf-c9cc-489f-a3ae-126e2505e200"),
                            Content = "This is the content of the sixth post.",
                            CreatedAt = new DateTime(2024, 7, 26, 22, 31, 32, 120, DateTimeKind.Utc).AddTicks(3865),
                            Title = "Sixth Post",
                            UserId = new Guid("e3f54c19-7c26-48d6-8696-1359e7e88f86")
                        },
                        new
                        {
                            Id = new Guid("8cc0d1e3-5613-4cae-a3a2-312c248b6e41"),
                            Content = "This is the content of the seventh post.",
                            CreatedAt = new DateTime(2024, 7, 26, 22, 31, 32, 120, DateTimeKind.Utc).AddTicks(3874),
                            Title = "Seventh Post",
                            UserId = new Guid("3670dc16-c548-4142-a4e8-ccd6691dcb6c")
                        },
                        new
                        {
                            Id = new Guid("597467f9-00bd-481c-b48a-d1ce44b1f458"),
                            Content = "This is the content of the eighth post.",
                            CreatedAt = new DateTime(2024, 7, 26, 22, 31, 32, 120, DateTimeKind.Utc).AddTicks(3911),
                            Title = "Eighth Post",
                            UserId = new Guid("e3f54c19-7c26-48d6-8696-1359e7e88f86")
                        },
                        new
                        {
                            Id = new Guid("f27d066d-c3c0-461b-9153-a7fe3cc34cce"),
                            Content = "This is the content of the ninth post.",
                            CreatedAt = new DateTime(2024, 7, 26, 22, 31, 32, 120, DateTimeKind.Utc).AddTicks(3920),
                            Title = "Ninth Post",
                            UserId = new Guid("3670dc16-c548-4142-a4e8-ccd6691dcb6c")
                        });
                });

            modelBuilder.Entity("BloggingPlatform.Domain.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommenterEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CommenterName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d78febcf-f7f1-49c3-b8a0-e920e8e701e0"),
                            BlogPostId = new Guid("afc8ea8d-e918-4c68-a896-8a64d9e2b3ff"),
                            CommenterEmail = "mahmoud12345@gmail.com",
                            CommenterName = "mahmoud",
                            Content = "This is a comment on the second post.",
                            CreatedAt = new DateTime(2024, 7, 26, 22, 31, 32, 121, DateTimeKind.Utc).AddTicks(6195),
                            UserId = new Guid("3670dc16-c548-4142-a4e8-ccd6691dcb6c")
                        },
                        new
                        {
                            Id = new Guid("e867ffdf-a5fa-4c60-a446-f9aa54695657"),
                            BlogPostId = new Guid("691bb48e-4acb-4797-ad80-a048107f74c7"),
                            CommenterEmail = "ahmed@gmail.com",
                            CommenterName = "ahmed",
                            Content = "This is a comment on the first post.",
                            CreatedAt = new DateTime(2024, 7, 26, 22, 31, 32, 121, DateTimeKind.Utc).AddTicks(6232),
                            UserId = new Guid("e3f54c19-7c26-48d6-8696-1359e7e88f86")
                        });
                });

            modelBuilder.Entity("BloggingPlatform.Domain.Followers.Follower", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "FollowerId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Followers");
                });

            modelBuilder.Entity("BloggingPlatform.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_passwordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordHash");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BloggingPlatform.Domain.BlogPosts.BlogPost", b =>
                {
                    b.HasOne("BloggingPlatform.Domain.Users.User", "User")
                        .WithMany("BlogPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloggingPlatform.Domain.Comments.Comment", b =>
                {
                    b.HasOne("BloggingPlatform.Domain.BlogPosts.BlogPost", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloggingPlatform.Domain.Users.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloggingPlatform.Domain.Followers.Follower", b =>
                {
                    b.HasOne("BloggingPlatform.Domain.Users.User", "FollowerUser")
                        .WithMany("FollowedUsers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloggingPlatform.Domain.Users.User", "User")
                        .WithMany("Followers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowerUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloggingPlatform.Domain.BlogPosts.BlogPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BloggingPlatform.Domain.Users.User", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("Comments");

                    b.Navigation("FollowedUsers");

                    b.Navigation("Followers");
                });
#pragma warning restore 612, 618
        }
    }
}
